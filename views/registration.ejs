<section class="registration">
  <h2>Rules</h2>
  <p>
    All participants interested in contributing to this Challenge are
    encouraged to carefully review and adhere to the rules outlined below.
  </p>

  <div class="rules-details">
    <h3>Registration Required</h3>
    <p>
      All participants must register to join the challenge. After registration,
      you'll receive essential credentials and updates.
      <br />
      &#128073; <a href="#registration">Register here</a>
    </p>
    <h3>Track Your Progress</h3>
    <p>
      Submit your interim results through our Results Portal to view your
      temporary ranking. A password is required (you will receive it after
      registration).
      <br />
      &#128073; <a href="/results">Submit results</a>
    </p>
    <h3>&#127942; Final Submission Requirements</h3>
    <p>Your GitHub repository MUST follow this exact structure:</p>
    <p>
      To ensure consistency and fairness in the evaluation process, top 10
      teams have highest performance submission must include a
      <strong>GitHub repository</strong> name as
      <strong>TeamName_CADOT_Challenge</strong> structured as below, containing
      the specified components.
    </p>
    <div class="rules-structure">
      <img src="/images/structure.png" alt="Repository Structure" />
    </div>
    <ul>
      <li>
        <strong>README.md</strong>: Must contain:
        <ul>
          <li>
            Hardware/software requirements (e.g., CUDA version, GPU memory).
          </li>
          <li>Step-by-step execution commands with example parameters.</li>
          <li>Validation scores achieved during development.</li>
          <li>
            Dependency installation instructions (preferably using virtual
            environment).
          </li>
        </ul>
      </li>
      <li>
        <strong>requirements.txt</strong>: Frozen dependencies with exact
        versions (e.g., <code>torch==2.1.0</code>).
      </li>
      <li>
        <strong>data/</strong>: Empty directories with
        <code>instructions.md</code> explaining the directory structure for
        generated images (if using augmentation).
      </li>
      <li>
        <strong>models/</strong>:
        <ul>
          <li>Pre-trained weights (.pth, .pt, .h5).</li>
          <li>Architecture file with all layer details.</li>
          <li>Config file with readable hyperparameters.</li>
        </ul>
      </li>
      <li>
        <strong>scripts/</strong>:
        <ul>
          <li>Training script with full reproducibility.</li>
          <li>Inference script producing COCO-format JSON.</li>
          <li>Separate module for data augmentation.</li>
          <li>Evaluation script calculating all metrics.</li>
        </ul>
      </li>
      <li>
        <strong>results/</strong>:
        <ul>
          <li>Final <code>predictions.json</code> for the test set.</li>
          <li><code>metrics.csv</code> with per-class AP/AR metrics.</li>
        </ul>
      </li>
      <li>
        <strong>reports/</strong>:
        <ul>
          <li>5-page PDF report including:</li>
          <ul>
            <li>Model architecture diagram</li>
            <li>Training convergence plots</li>
            <li>Error analysis with confusion matrix</li>
          </ul>
        </ul>
      </li>
    </ul>
    <h3>Technical Requirements – Critical Aspects:</h3>
    <ul>
      <li>
        <strong>Reproducibility:</strong> Must achieve ±1% mAP@50 variation
        from reported scores when re-run by organizers.
      </li>
      <li>
        <strong>Annotation Compliance:</strong> Predictions.json must use exact
        COCO-format with official class IDs.
      </li>
    </ul>
    <h3>Forbidden Practices:</h3>
    <ul>
      <li>Manual annotation of any generated images.</li>
      <li>External data not documented in report.</li>
    </ul>
  </div>

  <h2>Criteria</h2>
  <p>
    To decide the winner of this Challenge, the organizing committee will
    consider the following items:
  </p>
  <ul class="rules-details">
    <li>
      <strong>Performance Metrics</strong>: Mean Average Precision (mAP) at IoU
      0.5, with separate assessments for all object classes.
    </li>
    <li>
      <strong>Object Detection Performance</strong>: Evaluation will be
      conducted on both frequent and rare classes to ensure robustness across
      the dataset.
    </li>
    <li>
      <strong>Reproducibility</strong>: All results must be reproducible using
      provided scripts and models.
    </li>
    <li>
      <strong>Class-wide Performance</strong>: Balanced performance across all
      classes is essential.
    </li>
  </ul>
  <h2 id="registration">Registration</h2>

  <form class="registration-form" action="/submit-registration" method="POST">
    <label for="teamName"><strong>Team Name</strong></label>
    <input type="text" name="teamName" placeholder="Team Name" required />

    <div id="members-container">
      <div class="member-form">
        <h4>Team Member 1</h4>
        <input
          type="text"
          name="firstName[]"
          placeholder="First Name"
          required
          pattern="[A-Za-zÀ-ÿ\s\-]+"
          title="Letters only"
        />
        <input
          type="text"
          name="lastName[]"
          placeholder="Last Name"
          required
          pattern="[A-Za-zÀ-ÿ\s\-]+"
          title="Letters only"
        />
        <input type="email" name="email[]" placeholder="Email" required />
        <input
          type="text"
          name="institute[]"
          placeholder="Institute / Organization"
          required
        />
      </div>
    </div>

    <button type="button" id="add-member">+ Add Team Member</button>
    <button type="submit" class="submit-button">Submit Registration</button>
  </form>
</section>
<script>
  document
    .querySelector(".registration-form")
    .addEventListener("submit", async function (e) {
      e.preventDefault();

      const form = e.target;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());

      // Handle arrays like firstName[] properly
      ["firstName", "lastName", "email", "institute"].forEach((key) => {
        data[key] = formData.getAll(`${key}[]`);
      });

      try {
        const response = await fetch("/submit-registration", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        alert(result.message);

        if (result.success) {
          form.reset();
          // optionally window.location.href = '/'; if needed
        }
      } catch (err) {
        alert("Something went wrong. Please try again.");
      }
    });
</script>
